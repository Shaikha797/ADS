#include <stdio.h>
#include <limits.h>
#include <stdbool.h>

int minKey(int key[], bool mstSet[], int V) {
    int min = INT_MAX, minIndex,v;
    for (v = 0; v < V; v++) {
        if (!mstSet[v] && key[v] < min) {
            min = key[v];
            minIndex = v;
        }
    }
    return minIndex;
}

void printMST(int parent[], int graph[][20], int V) {
    int i;
    printf("Edge \tWeight\n");
    for (i = 1; i < V; i++) {
        printf("%d - %d \t%d\n", parent[i], i, graph[i][parent[i]]);
    }
}

void primMST(int graph[][20], int V) {
    int parent[V], key[V],i,count,v,u;
    bool mstSet[V];
    for (i = 0; i < V; i++) {
        key[i] = INT_MAX;
        mstSet[i] = false;
    }
    key[0] = 0;
    parent[0] = -1;
    for ( count = 0; count < V - 1; count++) {
         u = minKey(key, mstSet, V);
        mstSet[u] = true;
        for (v = 0; v < V; v++) {
            if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }
    printMST(parent, graph, V);
}

int main() {
    int V,i,j;
    printf("Enter the number of vertices: ");
    scanf("%d", &V);
    int graph[20][20];
    printf("Enter the adjacency matrix (enter 0 for no edge):\n");
    for (i = 0; i < V; i++) {
        for (j = 0; j < V; j++) {
            scanf("%d", &graph[i][j]);
        }
    }
    printf("Running Prim's Algorithm...\n");
    primMST(graph, V);
    return 0;
}